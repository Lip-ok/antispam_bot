
// ____________________–í–µ—Ä—Å–∏—è –±–æ—Ç–∞ –±–µ–∑ –∫–∞–ø—á–∏ —Å –ø–æ–∏—Å–∫–æ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º_______________________________

// require("dotenv").config();
// const { Bot } = require("grammy");
// const express = require("express");

// // –ó–∞–¥–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
// const bot = new Bot(process.env.BOT_TOKEN);

// // –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
// const scamKeywords = [
//   "–ë–æ–Ω—É—Å", "–§—Ä–∏—Å–ø–∏–Ω—ã", "–ö—ç—à–±–µ–∫", "–î–∂–µ–∫–ø–æ—Ç", "–í—ã–∏–≥—Ä—ã—à", "–õ—É–¥–æ–º–∞–Ω", "–î–µ–ø–æ–∑–∏—Ç",
//   "–í—ã–≤–æ–¥ (–¥–µ–Ω–µ–≥)", "–°—Ç–∞–≤–∫–∏", "–ö–∞–∑–∏–Ω–æ", "–ë—É–∫–º–µ–∫–µ—Ä", "–õ–µ–≥–∫–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫",
//   "–ë–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π", "–ö—Ä–∏–ø—Ç–æ–∫–∞–∑–∏–Ω–æ", "–†–∞–∑–¥–∞—á–∞ –¥–µ–Ω–µ–≥", "–ü—Ä–æ–º–æ–∫–æ–¥",
//   "–ì–∞—Ä–∞–Ω—Ç–∏—è 100%", "–õ–µ–≥–∫–∏–µ –¥–µ–Ω—å–≥–∏", "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ", "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –º–µ—Ç–æ–¥", "–í–∑–ª–æ–º",
//   "–ë–µ–∑ —Ä–∏—Å–∫–∞", "–í—ã–≤–µ–¥–∏ –¥–µ–Ω—å–≥–∏", "–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞", "–†–∞–±–æ—Ç–∞ –Ω–∞ –¥–æ–º—É",
//   "–ê–≤—Ç–æ–∑–∞—Ä–∞–±–æ—Ç–æ–∫", "–õ–µ–≥–∫–∏–µ –±–∞–±–∫–∏", "–î–æ—Ö–æ–¥ –±–µ–∑ —É—Å–∏–ª–∏–π", "–†–∞–±–æ—á–∞—è —Å—Ö–µ–º–∞",
//   "–ë—ã—Å—Ç—Ä–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ", "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–•–∞–π–ø", "–£–º–Ω–æ–∂—å –¥–µ–Ω—å–≥–∏",
//   "–ó–∞—Ä–∞–±–æ—Ç–∞–π –∑–∞ 5 –º–∏–Ω—É—Ç", "–î–æ—Ö–æ–¥ –Ω–∞ –ø–∞—Å—Å–∏–≤–µ", "–ë—ã—Å—Ç—Ä—ã–π –≤—ã–≤–æ–¥",
//   "–£–¥–≤–æ–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞", "–í–ª–æ–∂–∏ 100‚ÇΩ ‚Äì –ø–æ–ª—É—á–∏ 1000‚ÇΩ", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫",
//   "–£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è", "–¢–æ–ø–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã", "–ë–∏–Ω–∞—Ä–Ω—ã–µ –æ–ø—Ü–∏–æ–Ω—ã",
//   "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å", "Airdrop", "–†–∞–∑–¥–∞—á–∞", "–ö—Ä–∏–ø—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ",
//   "–ë–∏—Ç–∫–æ–∏–Ω", "ETH (Ethereum)", "NFT-—Ä–æ–∑—ã–≥—Ä—ã—à", "–°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç",
//   "–ë–ª–æ–∫—á–µ–π–Ω-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞", "–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π –≤ –∫—Ä–∏–ø—Ç—É", "–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç"
// ];

// // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
// const recentMessages = {};

// // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
// const containsScamWords = (text) => {
//   return scamKeywords.some(word => text.includes(word.toLowerCase()));
// };

// // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
// bot.on("message", async (ctx) => {
//   const text = ctx.message.text?.toLowerCase();
//   const chatId = ctx.chat.id;
//   const messageId = ctx.message.message_id;

//   // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
//   if (!recentMessages[chatId]) {
//     recentMessages[chatId] = [];
//   }

//   // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
//   recentMessages[chatId].push({ messageId, text });
  
//   // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
//   if (recentMessages[chatId].length > 10) {
//     recentMessages[chatId].shift();
//   }

//   if (text && containsScamWords(text)) {
//     const warningMessage = await ctx.reply(
//       "‚ö†Ô∏è –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥."
//     );

//     setTimeout(async () => {
//       try {
//         await ctx.api.deleteMessage(chatId, messageId);
//         await ctx.api.deleteMessage(chatId, warningMessage.message_id);
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
//       }
//     }, 10000);
//   }
// });

// // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
// bot.on("edited_message", async (ctx) => {
//   const text = ctx.editedMessage.text?.toLowerCase();
//   const chatId = ctx.chat.id;
//   const messageId = ctx.editedMessage.message_id;

//   if (text && containsScamWords(text)) {
//     try {
//       await ctx.api.deleteMessage(chatId, messageId);
//       console.log("–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ:", messageId);
//     } catch (error) {
//       console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
//     }
//   }
// });

// // –ó–∞–ø—É—Å–∫ Express-—Å–µ—Ä–≤–µ—Ä–∞
// const app = express();
// const PORT = process.env.PORT || 3000;

// app.get("/", (req, res) => {
//   res.send("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!");
// });

// // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
// bot.start();
// app.listen(PORT, () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));

// ____________________–í–µ—Ä—Å–∏—è –±–æ—Ç–∞ –±–µ–∑ –∫–∞–ø—á–∏ —Å –ø–æ–∏—Å–∫–æ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º_______________________________



require("dotenv").config();
const { Bot } = require("grammy");
const express = require("express");

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new Bot(process.env.BOT_TOKEN);

// –•—Ä–∞–Ω–∏–º –∫–∞–ø—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const captchaData = new Map();

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –¥–ª—è –∫–∞–ø—á–∏
const generateCaptcha = () => {
  const num1 = Math.floor(Math.random() * 10) + 10; // –æ—Ç 10 –¥–æ 59
  const num2 = Math.floor(Math.random() * 10) + 10; // –æ—Ç 10 –¥–æ 59
  return { question: `${num1} + ${num2}`, answer: num1 + num2 };
};

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥
const deleteMessageAfterDelay = async (chatId, messageId, delay = 10000) => {
  setTimeout(async () => {
    try {
      await bot.api.deleteMessage(chatId, messageId);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    }
  }, delay);
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–≤–∫–ª—é—á–∞—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ)
bot.on("chat_member", async (ctx) => {
  const member = ctx.chatMember.new_chat_member;
  const chatId = ctx.chat.id;
  
  if (member.status === "member") {
    await handleNewMember(chatId, member.user);
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
bot.on("message", async (ctx) => {
  if (ctx.message.new_chat_members) {
    for (const user of ctx.message.new_chat_members) {
      await handleNewMember(ctx.chat.id, user);
    }
  }
});

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
const handleNewMember = async (chatId, user) => {
  const userId = user.id;
  const { question, answer } = generateCaptcha();
  
  captchaData.set(userId, { answer, chatId });

  const msg = await bot.api.sendMessage(
    chatId,
    `üëã –ü—Ä–∏–≤–µ—Ç, ${user.first_name}!\n\n–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç, —Ä–µ—à–∏ –∫–∞–ø—á—É:\n\n*–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç ${question}?* (–û—Ç–≤–µ—Ç—å —á–∏—Å–ª–æ–º)`,
    { parse_mode: "Markdown" }
  );

  deleteMessageAfterDelay(chatId, msg.message_id); // –£–¥–∞–ª—è–µ–º –∫–∞–ø—á—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥, –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É
  setTimeout(async () => {
    console.log('captchaData', captchaData)
    console.log('captchaData', captchaData.has(userId))
    if (!captchaData.has(userId)) {
      try {
        await bot.api.banChatMember(chatId, userId);
        const kickMsg = await bot.api.sendMessage(chatId, `üö® ${user.first_name} –±—ã–ª —É–¥–∞–ª–µ–Ω –∑–∞ –Ω–µ–ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–∞–ø—á–∏.`);
        deleteMessageAfterDelay(chatId, kickMsg.message_id); // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–Ω–µ
        captchaData.delete(userId);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      }
    } else{
      const successMsg = await bot.api.sendMessage(
    chatId,"‚úÖ –í–µ—Ä–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!");
      deleteMessageAfterDelay(chatId, successMsg.message_id); // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–≤–µ—Ä–Ω–æ"
      captchaData.delete(userId);
    }

  }, 20000);
};


/// –ù–ï –ü–û–ü–ê–î–ê–ï–¢ –°–Æ–î–ê
// // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.on("message:text", async (ctx) => {
  const userId = ctx.message.from.id;
  const chatId = ctx.chat.id;
  const messageId = ctx.message.message_id;
  const userAnswer = parseInt(ctx.message.text.trim(), 10);
  const correctAnswer = captchaData.get(userId).answer;
 
  console.log('userId', userId, ' --- ', 'userAnswer', userAnswer)
  console.log('chatId', chatId, ' --- ', 'correctAnswer', correctAnswer)

  if (captchaData.has(userId)) {
    

    if (userAnswer === correctAnswer) {
      const successMsg = await ctx.reply("‚úÖ –í–µ—Ä–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!");
      deleteMessageAfterDelay(chatId, successMsg.message_id); // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–≤–µ—Ä–Ω–æ"
      captchaData.delete(userId);
    } else {
      const failMsg = await ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.");
      deleteMessageAfterDelay(chatId, failMsg.message_id); // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–Ω–µ–≤–µ—Ä–Ω–æ"
    }
  }

  deleteMessageAfterDelay(chatId, messageId); // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
});

// –ó–∞–ø—É—Å–∫ Express-—Å–µ—Ä–≤–µ—Ä–∞
const app = express();
const PORT = process.env.PORT || 3000;

app.get("/", (req, res) => {
  res.send("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!");
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.start();
app.listen(PORT, () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
